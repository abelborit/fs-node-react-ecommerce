import { Server } from "./presentation/server";
import { envs } from "./config";
import { AppRoutes } from "./presentation/routes";
import { MongoConnectionDataBase } from "./database/mongo";

/* Funci√≥n para conectar la base de datos */
async function initializeDatabase() {
  try {
    console.log("Connecting to MongoDB... üîÑ");
    const isConnectionMongoSuccess = await MongoConnectionDataBase.connect({
      mongoUrl: envs.MONGO_URL,
      databaseName: envs.MONGO_DB_NAME,
    });

    if (!isConnectionMongoSuccess) {
      throw new Error("Failed to connect to MongoDB.");
    }
    console.log("app.ts - MongoDB connected successfully ‚úÖ");
  } catch (error) {
    console.error("app.ts - Failed to connect to MongoDB ‚ùå:", error);
    throw error; // Escalar el error para manejarlo en el nivel principal.
  }
}

/* Funci√≥n para iniciar el servidor */
async function initializeServer() {
  try {
    const server = new Server({
      port: envs.PORT,
      public_path: envs.PUBLIC_PATH,
      routes: AppRoutes.routes,
    });

    console.log("Starting the server... üîÑ");
    await server.start();
    console.log("app.ts - Server started successfully ‚úÖ");
  } catch (error) {
    console.error("app.ts - Failed to start the server ‚ùå:", error);
    throw error; // Escalar el error para manejarlo en el nivel principal.
  }
}

/* Manejar la desconexi√≥n y se√±ales */
function setupGracefulShutdown() {
  process.on("SIGINT", async () => {
    console.log("üîÑ Disconnecting from MongoDB...");
    try {
      await MongoConnectionDataBase.disconnect();
      console.log("app.ts - MongoDB disconnected successfully ‚úÖ.");
    } catch (error) {
      console.error("app.ts - Error during MongoDB disconnection ‚ùå:", error);
    } finally {
      console.log("üëã Application terminated gracefully.");
      process.exit(0);
    }
  });
}

/* Funci√≥n principal que organiza todo */
async function main() {
  try {
    await initializeDatabase(); // Conectar base de datos
    await initializeServer(); // Iniciar servidor
    setupGracefulShutdown(); // Configurar manejo de desconexi√≥n
  } catch (error) {
    console.error("app.ts - Application failed to start ‚ùå:", error);

    /* Indica que la aplicaci√≥n se cerr√≥ debido a un error no manejado correctamente. Esto es √∫til en aplicaciones donde no se puede continuar si algo falla al inicio (por ejemplo, fallar al conectar con la base de datos o cargar configuraciones cr√≠ticas) */
    process.exit(1); // Terminar aplicaci√≥n en caso de error cr√≠tico
  }
}

/* Llamada al flujo principal */
main();

/* ************************************************************************************************************************ */

/* --- NOTAS --- */
/* Usar async en funciones como main ayuda a mantener un flujo est√°ndar cuando la aplicaci√≥n crezca. Por ejemplo, si se agrega inicializaciones que requieren await, no se tendr√° que cambiar todo el esquema del inicio */
/* Las funciones as√≠ncronas permiten usar try-catch de manera eficiente, especialmente para operaciones que puedan fallar y lanzar excepciones */
/* ¬øCu√°ndo NO usar async? Cuando la funci√≥n no tiene ninguna operaci√≥n as√≠ncrona y no existe posibilidad razonable de que en el futuro se agreguen */
